name: Pre-Upload Testing and Validation

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Type of validation to run"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - metadata
          - security
          - build
          - test
          - python-versions
          - auth
          - version
          - comprehensive
          - report
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
      - "requirements*.txt"
      - "scripts/**"
      - ".github/workflows/pre-upload-test.yml"

env:
  PYTHON_VERSION: "3.12"

# Security: Define permissions for the workflow
permissions:
  contents: read

jobs:
  pre-upload-validation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        test-type: [metadata, security, build, test, comprehensive]
        exclude:
          - python-version: "3.9"
            test-type: comprehensive
          - python-version: "3.10"
            test-type: comprehensive
          - python-version: "3.11"
            test-type: comprehensive

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run pre-upload validation
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          echo "🔍 Running pre-upload validation for Python ${{ matrix.python-version }}"
          echo "📋 Test type: ${{ matrix.test-type }}"

          # Make script executable
          chmod +x scripts/pre-upload-validation.sh

          # Run specific validation based on matrix
          if [ "${{ github.event.inputs.test_type }}" != "" ]; then
            TEST_TYPE="${{ github.event.inputs.test_type }}"
          else
            TEST_TYPE="${{ matrix.test-type }}"
          fi

          case $TEST_TYPE in
            metadata)
              ./scripts/pre-upload-validation.sh --metadata
              ;;
            security)
              ./scripts/pre-upload-validation.sh --security
              ;;
            build)
              ./scripts/pre-upload-validation.sh --build
              ;;
            test)
              ./scripts/pre-upload-validation.sh --test
              ;;
            python-versions)
              ./scripts/pre-upload-validation.sh --python-versions
              ;;
            auth)
              ./scripts/pre-upload-validation.sh --auth
              ;;
            version)
              ./scripts/pre-upload-validation.sh --version
              ;;
            comprehensive)
              ./scripts/pre-upload-validation.sh --comprehensive
              ;;
            report)
              ./scripts/pre-upload-validation.sh --report
              ;;
            all)
              ./scripts/pre-upload-validation.sh --all
              ;;
            *)
              echo "❌ Unknown test type: $TEST_TYPE"
              exit 1
              ;;
          esac

          echo "✅ Pre-upload validation completed successfully"

      - name: Upload validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports-${{ matrix.python-version }}-${{ matrix.test-type }}
          path: |
            *.json
            pre-upload-validation-report.txt
            dist/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit detect-secrets pip-audit safety

      - name: Run comprehensive security scan
        run: |
          echo "🔒 Running comprehensive security scan..."

          # Scan for secrets in code
          echo "🔍 Scanning for secrets..."
          detect-secrets scan --baseline .secrets.baseline . > detect-secrets-report.json || true

          # Run bandit security analysis
          echo "🔍 Running bandit security analysis..."
          bandit -r src/ -f json -o bandit-report.json || true

          # Check for dependency vulnerabilities
          echo "🔍 Checking dependency vulnerabilities..."
          pip-audit --format json --output pip-audit-report.json || true

          # Additional safety checks
          echo "🔍 Running safety checks..."
          safety check --json --output safety-report.json || true

          # Check for hardcoded secrets in configuration
          echo "🔍 Checking for hardcoded secrets..."
          if grep -r "sk-|pk_|ghp_|gho_|ghu_|ghs_|ghr_" src/ tests/; then
            echo "❌ Potential secrets found in code"
            exit 1
          fi

          echo "✅ Security scan completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            detect-secrets-report.json
            bandit-report.json
            pip-audit-report.json
            safety-report.json

  package-build-test:
    runs-on: ubuntu-latest
    needs: [pre-upload-validation, security-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-manifest pip-audit

      - name: Clean build environment
        run: |
          # Clean any existing builds
          rm -rf dist/ build/ *.egg-info/
          echo "🧹 Build environment cleaned"

      - name: Build package
        run: |
          # Build both wheel and source distribution
          python -m build --wheel --sdist

          # List build artifacts
          echo "📦 Build artifacts:"
          ls -la dist/

          # Show package contents
          for file in dist/*; do
            echo "📋 Contents of $file:"
            if [[ $file == *.whl ]]; then
              unzip -l "$file" | head -10
            elif [[ $file == *.tar.gz ]]; then
              tar -tzf "$file" | head -10
            fi
            echo ""
          done

      - name: Validate package security
        run: |
          # Check for security issues
          pip-audit --format json --output pip-audit.json || true

          # Validate package with twine
          twine check dist/*

          # Check package size and contents
          for file in dist/*; do
            size=$(du -h "$file" | cut -f1)
            echo "📦 $file: $size"

            # Check for suspicious files in package
            if [[ $file == *.whl ]]; then
              if unzip -l "$file" | grep -E "\.(key|pem|crt|p12|pfx|pwd|pass|secret|token)" \
                | grep -q .; then
                echo "⚠️  Warning: Potential secrets found in package"
              fi
            fi
          done

      - name: Test package installation
        run: |
          # Test installation in clean environment
          python -m venv test-env
          source test-env/bin/activate

          # Install from wheel
          echo "🔧 Testing wheel installation..."
          pip install dist/*.whl
          python -c "import gitco; print(f'✅ Wheel installation successful: {gitco.__version__}')"

          # Test CLI command
          gitco --help

          # Test source distribution
          echo "🔧 Testing source distribution installation..."
          pip uninstall gitco -y
          pip install dist/*.tar.gz
          python -c "import gitco; print(f'✅ Source distribution installation successful: {gitco.__version__}')"

          # Test CLI functionality
          gitco --help

          deactivate
          rm -rf test-env

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  notify:
    runs-on: ubuntu-latest
    needs: [pre-upload-validation, security-scan, package-build-test]
    if: always()
    steps:
      - name: Handle success
        if: >
          needs.pre-upload-validation.result == 'success' &&
          needs.security-scan.result == 'success' &&
          needs.package-build-test.result == 'success'
        run: |
          echo "✅ Pre-upload validation completed successfully"
          echo "🔒 Security scan passed"
          echo "📦 Package build and test passed"
          echo "🚀 Package is ready for upload to PyPI"

      - name: Handle failure
        if: >
          needs.pre-upload-validation.result == 'failure' ||
          needs.security-scan.result == 'failure' ||
          needs.package-build-test.result == 'failure'
        run: |
          echo "❌ Pre-upload validation failed"
          echo "🔍 Check the workflow logs for details"
          echo "📧 Notify maintainers of the failure"
          echo "🔒 Review security scan reports if available"
