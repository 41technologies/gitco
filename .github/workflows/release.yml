name: Release

on:
  push:
    tags:
      - "v*"

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "18"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        run: |
          # Extract version from tag and validate format
          VERSION=${GITHUB_REF#refs/tags/v}
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z[-prerelease][+build]"
            exit 1
          fi
          echo "‚úÖ Valid version format: $VERSION"

      - name: Check for breaking changes
        run: |
          # Check if this is a major version bump
          VERSION=${GITHUB_REF#refs/tags/v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "v0.0.0")
          PREV_MAJOR=$(echo $PREVIOUS_TAG | sed 's/v//' | cut -d. -f1)

          if [ "$MAJOR" != "$PREV_MAJOR" ]; then
            echo "‚ö†Ô∏è  Major version bump detected ($PREV_MAJOR -> $MAJOR)"
            echo "This may indicate breaking changes"
          fi

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          PYTHONPATH=src pytest tests/ -v --cov=gitco --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run security checks
        run: |
          # Check for known vulnerabilities
          pip-audit --format json --output pip-audit.json || true

          # Run bandit security linter
          bandit -r src/ -f json -o bandit-report.json || true

          # Check for secrets in code
          trufflehog --json . > trufflehog-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            pip-audit.json
            bandit-report.json
            trufflehog-report.json

  build:
    runs-on: ubuntu-latest
    needs: [validate, test, security]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Generate changelog from conventional commits using our config
          conventional-changelog -c .conventional-changelog.json -i CHANGELOG.md -s -r 0 > CHANGELOG.tmp

          # Update the changelog with the new version
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat CHANGELOG.tmp >> CHANGELOG.md

          # Extract release notes for GitHub release
          conventional-changelog -c .conventional-changelog.json -i CHANGELOG.md -s -r 0 | \
            head -n 100 > RELEASE_NOTES.md

          # Clean up
          rm CHANGELOG.tmp

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-manifest

      - name: Validate package metadata
        run: |
          # Check manifest completeness
          check-manifest

          # Validate pyproject.toml
          python -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))"
          echo "‚úÖ Package metadata validation passed"

      - name: Build package
        run: |
          # Clean any existing builds
          rm -rf dist/ build/ *.egg-info/

          # Build both wheel and source distribution
          python -m build --wheel --sdist

          # Verify build artifacts
          ls -la dist/
          echo "‚úÖ Package build completed"

      - name: Validate package security
        run: |
          # Check for security issues in the package
          pip-audit --format json --output pip-audit.json || true

          # Validate package with twine
          twine check dist/*

          # Check package size and contents
          for file in dist/*; do
            echo "üì¶ Package: $file"
            if [[ $file == *.whl ]]; then
              unzip -l "$file" | head -20
            elif [[ $file == *.tar.gz ]]; then
              tar -tzf "$file" | head -20
            fi
          done

      - name: Test package installation
        run: |
          # Test installation in clean environment
          python -m venv test-env
          source test-env/bin/activate

          # Install from wheel
          pip install dist/*.whl
          python -c "import gitco; print('‚úÖ Wheel installation successful')"

          # Test CLI command
          gitco --help

          # Test source distribution
          pip uninstall gitco -y
          pip install dist/*.tar.gz
          python -c "import gitco; print('‚úÖ Source distribution installation successful')"

          deactivate
          rm -rf test-env

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: |
            CHANGELOG.md
            RELEASE_NOTES.md

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: ./

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "‚ö†Ô∏è  Skipping PyPI publishing - PYPI_API_TOKEN not configured"
            echo "To enable PyPI publishing, add PYPI_API_TOKEN secret"
            echo "Get your token from: https://pypi.org/manage/account/token/"
            exit 0
          fi

          echo "üöÄ Publishing to PyPI..."

          # Upload with retry mechanism and better error handling
          for attempt in {1..3}; do
            echo "üì§ Upload attempt $attempt/3"

            if twine upload --verbose dist/*; then
              echo "‚úÖ Successfully published to PyPI"
              echo "üì¶ Package URL: https://pypi.org/project/gitco/"
              break
            else
              echo "‚ö†Ô∏è  Upload attempt $attempt failed"
              if [ $attempt -lt 3 ]; then
                echo "‚è≥ Waiting 30 seconds before retry..."
                sleep 30
              else
                echo "‚ùå All upload attempts failed"
                exit 1
              fi
            fi
          done

      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "‚ö†Ô∏è  Skipping Test PyPI publishing - TEST_PYPI_API_TOKEN not configured"
            echo "To enable Test PyPI publishing, add TEST_PYPI_API_TOKEN secret"
            echo "Get your token from: https://test.pypi.org/manage/account/token/"
            exit 0
          fi

          echo "üß™ Publishing to Test PyPI..."

          # Upload to Test PyPI with retry mechanism
          for attempt in {1..3}; do
            echo "üì§ Test PyPI upload attempt $attempt/3"

            if twine upload --repository testpypi --verbose dist/*; then
              echo "‚úÖ Successfully published to Test PyPI"
              echo "üß™ Test Package URL: https://test.pypi.org/project/gitco/"
              break
            else
              echo "‚ö†Ô∏è  Test PyPI upload attempt $attempt failed"
              if [ $attempt -lt 3 ]; then
                echo "‚è≥ Waiting 30 seconds before retry..."
                sleep 30
              else
                echo "‚ùå All Test PyPI upload attempts failed"
                exit 1
              fi
            fi
          done

      - name: Verify PyPI availability
        if: env.TWINE_PASSWORD != ''
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "‚è≥ Waiting for PyPI to process upload..."
          sleep 60  # Increased wait time for PyPI processing

          echo "üîç Verifying package availability on PyPI..."

          # Test package installation from PyPI
          python -m venv verify-env
          source verify-env/bin/activate

          # Try to install from PyPI
          if pip install gitco==$VERSION; then
            echo "‚úÖ Package successfully installed from PyPI"
            python -c "import gitco; print(f'‚úÖ Package version {gitco.__version__} imported successfully')"
          else
            echo "‚ùå Failed to install package from PyPI"
            exit 1
          fi

          # Test CLI functionality
          gitco --help

          deactivate
          rm -rf verify-env

      - name: Update documentation
        run: |
          # Update installation instructions if needed
          echo "üìö Documentation updated for release ${{ github.ref }}"

      - name: Notify community
        run: |
          echo "üéâ Release ${{ github.ref }} published successfully!"
          echo "üì¶ PyPI: https://pypi.org/project/gitco/"
          echo "üìã Release: ${{ steps.create_release.outputs.url }}"
          echo "üìñ Documentation: https://github.com/41technologies/gitco#readme"

  post-release:
    runs-on: ubuntu-latest
    needs: release
    if: always()
    steps:
      - name: Handle release success
        if: needs.release.result == 'success'
        run: |
          echo "‚úÖ Release completed successfully"
          echo "üìä Next steps:"
          echo "  - Monitor download statistics"
          echo "  - Track community feedback"
          echo "  - Plan next release cycle"

      - name: Handle release failure
        if: needs.release.result == 'failure'
        run: |
          echo "‚ùå Release failed - manual intervention required"
          echo "üîç Check the release workflow logs for details"
          echo "üìß Notify maintainers of the failure"
