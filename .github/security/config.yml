# Security Configuration for GitCo
# This file defines security policies and settings for the project

security:
  # Authentication settings
  authentication:
    pypi:
      # Authentication method
      method: "api_token"

      # Token validation settings
      token_validation:
        # Required token prefix for PyPI tokens
        required_prefix: "pypi-"

        # Maximum token age in days
        max_age_days: 90

        # Required scopes for tokens
        required_scopes:
          - "pypi:upload"
          - "pypi:read"

  # Security scanning settings
  scanning:
    # Secret scanning
    secrets:
      # Tools to use for secret scanning
      tools:
        - "detect-secrets"
        - "bandit"

      # Patterns to scan for
      patterns:
        - "sk-[a-zA-Z0-9]{48}"
        - "pk_[a-zA-Z0-9]{48}"
        - "ghp_[a-zA-Z0-9]{36}"
        - "gho_[a-zA-Z0-9]{36}"
        - "ghu_[a-zA-Z0-9]{36}"
        - "ghs_[a-zA-Z0-9]{36}"
        - "ghr_[a-zA-Z0-9]{36}"

      # Files to exclude from scanning
      exclude:
        - "*.log"
        - "*.tmp"
        - "*.cache"
        - ".git/*"
        - "node_modules/*"
        - "__pycache__/*"

    # Dependency scanning
    dependencies:
      # Tools to use for dependency scanning
      tools:
        - "pip-audit"
        - "safety"

      # Severity levels to report
      severity_levels:
        - "CRITICAL"
        - "HIGH"
        - "MEDIUM"

      # Update policy
      update_policy:
        # Automatically update critical vulnerabilities
        auto_update_critical: true

        # Maximum age for security updates (days)
        max_update_age_days: 7

        # Required approval for high severity updates
        require_approval_high: true

    # Static analysis
    static_analysis:
      # Tools to use for static analysis
      tools:
        - "bandit"
        - "ruff"

      # Security rules to enforce
      security_rules:
        - "B101" # Use of assert detected
        - "B102" # Use of exec detected
        - "B103" # Set bad permissions to mask
        - "B104" # Hardcoded bind all interfaces
        - "B105" # Hardcoded password string
        - "B106" # Hardcoded password func arg
        - "B107" # Hardcoded password default
        - "B201" # Flask app debug is true
        - "B301" # Pickle and modules that wrap it can be unsafe
        - "B302" # marshal is dangerous
        - "B303" # Use of insecure MD2, MD4, MD5, or SHA1 hash function
        - "B304" # Use of insecure cipher mode
        - "B305" # Use of insecure cipher
        - "B306" # Use of insecure cipher mode
        - "B307" # Use of possibly insecure function
        - "B401" # Import of insecure module
        - "B402" # Import of insecure module
        - "B403" # Import of insecure module
        - "B501" # Use of insecure module
        - "B601" # Paramiko call with shell=True
        - "B602" # Subprocess call with shell=True
        - "B603" # Subprocess call - check for execution of untrusted input
        - "B604" # Any test call with shell=True
        - "B605" # Start process with a partial executable path
        - "B606" # Use of insecure module
        - "B607" # Start process with a shell
        - "B608" # Hardcoded SQL expression
        - "B609" # Use of insecure module

  # Package security settings
  package:
    # Package validation
    validation:
      # Maximum package size in MB
      max_size_mb: 50

      # Forbidden file patterns
      forbidden_patterns:
        - "*.key"
        - "*.pem"
        - "*.crt"
        - "*.p12"
        - "*.pfx"
        - "*.pwd"
        - "*.pass"
        - "*.secret"
        - "*.token"
        - "config.ini"
        - ".env"
        - "secrets.json"

      # Required metadata
      required_metadata:
        - "name"
        - "version"
        - "description"
        - "author"
        - "license"
        - "python_requires"

    # Publishing security
    publishing:
      # Version validation
      version:
        # Required format
        format: "semantic"

        # Minimum version components
        min_components: 3

        # Maximum version components
        max_components: 5

        # Allowed pre-release suffixes
        allowed_prerelease:
          - "alpha"
          - "beta"
          - "rc"
          - "dev"

      # Upload validation
      upload:
        # Retry settings
        retry:
          max_attempts: 3
          delay_seconds: 30

        # Timeout settings
        timeout:
          connect_seconds: 30
          read_seconds: 300

        # Rate limiting
        rate_limit:
          requests_per_minute: 10
          burst_limit: 5

  # Monitoring and alerting
  monitoring:
    # Security metrics
    metrics:
      # Track authentication failures
      auth_failures: true

      # Track security scan results
      scan_results: true

      # Track upload success rates
      upload_success: true

      # Track dependency vulnerabilities
      dependency_vulns: true

    # Alerting
    alerts:
      # Authentication failure threshold
      auth_failure_threshold: 3

      # Security violation threshold
      security_violation_threshold: 1

      # Upload failure threshold
      upload_failure_threshold: 3

      # Notification channels
      channels:
        - "github_issues"
        - "email"
        - "slack"

  # Compliance settings
  compliance:
    # Standards to comply with
    standards:
      - "OWASP_TOP_10"
      - "NIST_CYBERSECURITY_FRAMEWORK"
      - "GITHUB_SECURITY_BEST_PRACTICES"
      - "PYPI_SECURITY_GUIDELINES"

    # Audit settings
    audit:
      # Regular audit schedule
      schedule: "monthly"

      # Audit scope
      scope:
        - "code"
        - "dependencies"
        - "configuration"
        - "processes"

      # Audit reporting
      reporting:
        format: "json"
        include_recommendations: true
        include_remediation: true
